<?php
/**
 * Ptsv2paymentsPointOfSaleInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Ptsv2paymentsPointOfSaleInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2paymentsPointOfSaleInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2payments_pointOfSaleInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'terminalId' => 'string',
        'terminalSerialNumber' => 'string',
        'laneNumber' => 'string',
        'catLevel' => 'int',
        'entryMode' => 'string',
        'terminalCapability' => 'int',
        'pinEntryCapability' => 'int',
        'operatingEnvironment' => 'string',
        'emv' => '\CyberSource\Model\Ptsv2paymentsPointOfSaleInformationEmv',
        'amexCapnData' => 'string',
        'trackData' => 'string',
        'storeAndForwardIndicator' => 'string',
        'cardholderVerificationMethod' => 'string[]',
        'terminalInputCapability' => 'string[]',
        'terminalCardCaptureCapability' => 'string',
        'terminalOutputCapability' => 'string',
        'terminalPinCapability' => 'int',
        'deviceId' => 'string',
        'pinBlockEncodingFormat' => 'int',
        'encryptedPin' => 'string',
        'encryptedKeySerialNumber' => 'string',
        'partnerSdkVersion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'terminalId' => null,
        'terminalSerialNumber' => null,
        'laneNumber' => null,
        'catLevel' => null,
        'entryMode' => null,
        'terminalCapability' => null,
        'pinEntryCapability' => null,
        'operatingEnvironment' => null,
        'emv' => null,
        'amexCapnData' => null,
        'trackData' => null,
        'storeAndForwardIndicator' => null,
        'cardholderVerificationMethod' => null,
        'terminalInputCapability' => null,
        'terminalCardCaptureCapability' => null,
        'terminalOutputCapability' => null,
        'terminalPinCapability' => null,
        'deviceId' => null,
        'pinBlockEncodingFormat' => null,
        'encryptedPin' => null,
        'encryptedKeySerialNumber' => null,
        'partnerSdkVersion' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'terminalId' => 'terminalId',
        'terminalSerialNumber' => 'terminalSerialNumber',
        'laneNumber' => 'laneNumber',
        'catLevel' => 'catLevel',
        'entryMode' => 'entryMode',
        'terminalCapability' => 'terminalCapability',
        'pinEntryCapability' => 'pinEntryCapability',
        'operatingEnvironment' => 'operatingEnvironment',
        'emv' => 'emv',
        'amexCapnData' => 'amexCapnData',
        'trackData' => 'trackData',
        'storeAndForwardIndicator' => 'storeAndForwardIndicator',
        'cardholderVerificationMethod' => 'cardholderVerificationMethod',
        'terminalInputCapability' => 'terminalInputCapability',
        'terminalCardCaptureCapability' => 'terminalCardCaptureCapability',
        'terminalOutputCapability' => 'terminalOutputCapability',
        'terminalPinCapability' => 'terminalPinCapability',
        'deviceId' => 'deviceId',
        'pinBlockEncodingFormat' => 'pinBlockEncodingFormat',
        'encryptedPin' => 'encryptedPin',
        'encryptedKeySerialNumber' => 'encryptedKeySerialNumber',
        'partnerSdkVersion' => 'partnerSdkVersion'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'terminalId' => 'setTerminalId',
        'terminalSerialNumber' => 'setTerminalSerialNumber',
        'laneNumber' => 'setLaneNumber',
        'catLevel' => 'setCatLevel',
        'entryMode' => 'setEntryMode',
        'terminalCapability' => 'setTerminalCapability',
        'pinEntryCapability' => 'setPinEntryCapability',
        'operatingEnvironment' => 'setOperatingEnvironment',
        'emv' => 'setEmv',
        'amexCapnData' => 'setAmexCapnData',
        'trackData' => 'setTrackData',
        'storeAndForwardIndicator' => 'setStoreAndForwardIndicator',
        'cardholderVerificationMethod' => 'setCardholderVerificationMethod',
        'terminalInputCapability' => 'setTerminalInputCapability',
        'terminalCardCaptureCapability' => 'setTerminalCardCaptureCapability',
        'terminalOutputCapability' => 'setTerminalOutputCapability',
        'terminalPinCapability' => 'setTerminalPinCapability',
        'deviceId' => 'setDeviceId',
        'pinBlockEncodingFormat' => 'setPinBlockEncodingFormat',
        'encryptedPin' => 'setEncryptedPin',
        'encryptedKeySerialNumber' => 'setEncryptedKeySerialNumber',
        'partnerSdkVersion' => 'setPartnerSdkVersion'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'terminalId' => 'getTerminalId',
        'terminalSerialNumber' => 'getTerminalSerialNumber',
        'laneNumber' => 'getLaneNumber',
        'catLevel' => 'getCatLevel',
        'entryMode' => 'getEntryMode',
        'terminalCapability' => 'getTerminalCapability',
        'pinEntryCapability' => 'getPinEntryCapability',
        'operatingEnvironment' => 'getOperatingEnvironment',
        'emv' => 'getEmv',
        'amexCapnData' => 'getAmexCapnData',
        'trackData' => 'getTrackData',
        'storeAndForwardIndicator' => 'getStoreAndForwardIndicator',
        'cardholderVerificationMethod' => 'getCardholderVerificationMethod',
        'terminalInputCapability' => 'getTerminalInputCapability',
        'terminalCardCaptureCapability' => 'getTerminalCardCaptureCapability',
        'terminalOutputCapability' => 'getTerminalOutputCapability',
        'terminalPinCapability' => 'getTerminalPinCapability',
        'deviceId' => 'getDeviceId',
        'pinBlockEncodingFormat' => 'getPinBlockEncodingFormat',
        'encryptedPin' => 'getEncryptedPin',
        'encryptedKeySerialNumber' => 'getEncryptedKeySerialNumber',
        'partnerSdkVersion' => 'getPartnerSdkVersion'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['terminalId'] = isset($data['terminalId']) ? $data['terminalId'] : null;
        $this->container['terminalSerialNumber'] = isset($data['terminalSerialNumber']) ? $data['terminalSerialNumber'] : null;
        $this->container['laneNumber'] = isset($data['laneNumber']) ? $data['laneNumber'] : null;
        $this->container['catLevel'] = isset($data['catLevel']) ? $data['catLevel'] : null;
        $this->container['entryMode'] = isset($data['entryMode']) ? $data['entryMode'] : null;
        $this->container['terminalCapability'] = isset($data['terminalCapability']) ? $data['terminalCapability'] : null;
        $this->container['pinEntryCapability'] = isset($data['pinEntryCapability']) ? $data['pinEntryCapability'] : null;
        $this->container['operatingEnvironment'] = isset($data['operatingEnvironment']) ? $data['operatingEnvironment'] : null;
        $this->container['emv'] = isset($data['emv']) ? $data['emv'] : null;
        $this->container['amexCapnData'] = isset($data['amexCapnData']) ? $data['amexCapnData'] : null;
        $this->container['trackData'] = isset($data['trackData']) ? $data['trackData'] : null;
        $this->container['storeAndForwardIndicator'] = isset($data['storeAndForwardIndicator']) ? $data['storeAndForwardIndicator'] : null;
        $this->container['cardholderVerificationMethod'] = isset($data['cardholderVerificationMethod']) ? $data['cardholderVerificationMethod'] : null;
        $this->container['terminalInputCapability'] = isset($data['terminalInputCapability']) ? $data['terminalInputCapability'] : null;
        $this->container['terminalCardCaptureCapability'] = isset($data['terminalCardCaptureCapability']) ? $data['terminalCardCaptureCapability'] : null;
        $this->container['terminalOutputCapability'] = isset($data['terminalOutputCapability']) ? $data['terminalOutputCapability'] : null;
        $this->container['terminalPinCapability'] = isset($data['terminalPinCapability']) ? $data['terminalPinCapability'] : null;
        $this->container['deviceId'] = isset($data['deviceId']) ? $data['deviceId'] : null;
        $this->container['pinBlockEncodingFormat'] = isset($data['pinBlockEncodingFormat']) ? $data['pinBlockEncodingFormat'] : null;
        $this->container['encryptedPin'] = isset($data['encryptedPin']) ? $data['encryptedPin'] : null;
        $this->container['encryptedKeySerialNumber'] = isset($data['encryptedKeySerialNumber']) ? $data['encryptedKeySerialNumber'] : null;
        $this->container['partnerSdkVersion'] = isset($data['partnerSdkVersion']) ? $data['partnerSdkVersion'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['terminalId']) && (strlen($this->container['terminalId']) > 8)) {
            $invalid_properties[] = "invalid value for 'terminalId', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['terminalSerialNumber']) && (strlen($this->container['terminalSerialNumber']) > 32)) {
            $invalid_properties[] = "invalid value for 'terminalSerialNumber', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['laneNumber']) && (strlen($this->container['laneNumber']) > 8)) {
            $invalid_properties[] = "invalid value for 'laneNumber', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['catLevel']) && ($this->container['catLevel'] > 9)) {
            $invalid_properties[] = "invalid value for 'catLevel', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['catLevel']) && ($this->container['catLevel'] < 1)) {
            $invalid_properties[] = "invalid value for 'catLevel', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['entryMode']) && (strlen($this->container['entryMode']) > 11)) {
            $invalid_properties[] = "invalid value for 'entryMode', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['terminalCapability']) && ($this->container['terminalCapability'] > 5)) {
            $invalid_properties[] = "invalid value for 'terminalCapability', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['terminalCapability']) && ($this->container['terminalCapability'] < 1)) {
            $invalid_properties[] = "invalid value for 'terminalCapability', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pinEntryCapability']) && ($this->container['pinEntryCapability'] > 1)) {
            $invalid_properties[] = "invalid value for 'pinEntryCapability', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['pinEntryCapability']) && ($this->container['pinEntryCapability'] < 1)) {
            $invalid_properties[] = "invalid value for 'pinEntryCapability', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['operatingEnvironment']) && (strlen($this->container['operatingEnvironment']) > 1)) {
            $invalid_properties[] = "invalid value for 'operatingEnvironment', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['amexCapnData']) && (strlen($this->container['amexCapnData']) > 12)) {
            $invalid_properties[] = "invalid value for 'amexCapnData', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['storeAndForwardIndicator']) && (strlen($this->container['storeAndForwardIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'storeAndForwardIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['terminalCardCaptureCapability']) && (strlen($this->container['terminalCardCaptureCapability']) > 1)) {
            $invalid_properties[] = "invalid value for 'terminalCardCaptureCapability', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['terminalOutputCapability']) && (strlen($this->container['terminalOutputCapability']) > 1)) {
            $invalid_properties[] = "invalid value for 'terminalOutputCapability', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['deviceId']) && (strlen($this->container['deviceId']) > 32)) {
            $invalid_properties[] = "invalid value for 'deviceId', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['pinBlockEncodingFormat']) && ($this->container['pinBlockEncodingFormat'] > 9)) {
            $invalid_properties[] = "invalid value for 'pinBlockEncodingFormat', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['encryptedPin']) && (strlen($this->container['encryptedPin']) > 16)) {
            $invalid_properties[] = "invalid value for 'encryptedPin', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['encryptedKeySerialNumber']) && (strlen($this->container['encryptedKeySerialNumber']) > 20)) {
            $invalid_properties[] = "invalid value for 'encryptedKeySerialNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['partnerSdkVersion']) && (strlen($this->container['partnerSdkVersion']) > 32)) {
            $invalid_properties[] = "invalid value for 'partnerSdkVersion', the character length must be smaller than or equal to 32.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['terminalId']) > 8) {
            return false;
        }
        if (strlen($this->container['terminalSerialNumber']) > 32) {
            return false;
        }
        if (strlen($this->container['laneNumber']) > 8) {
            return false;
        }
        if ($this->container['catLevel'] > 9) {
            return false;
        }
        if ($this->container['catLevel'] < 1) {
            return false;
        }
        if (strlen($this->container['entryMode']) > 11) {
            return false;
        }
        if ($this->container['terminalCapability'] > 5) {
            return false;
        }
        if ($this->container['terminalCapability'] < 1) {
            return false;
        }
        if ($this->container['pinEntryCapability'] > 1) {
            return false;
        }
        if ($this->container['pinEntryCapability'] < 1) {
            return false;
        }
        if (strlen($this->container['operatingEnvironment']) > 1) {
            return false;
        }
        if (strlen($this->container['amexCapnData']) > 12) {
            return false;
        }
        if (strlen($this->container['storeAndForwardIndicator']) > 1) {
            return false;
        }
        if (strlen($this->container['terminalCardCaptureCapability']) > 1) {
            return false;
        }
        if (strlen($this->container['terminalOutputCapability']) > 1) {
            return false;
        }
        if (strlen($this->container['deviceId']) > 32) {
            return false;
        }
        if ($this->container['pinBlockEncodingFormat'] > 9) {
            return false;
        }
        if (strlen($this->container['encryptedPin']) > 16) {
            return false;
        }
        if (strlen($this->container['encryptedKeySerialNumber']) > 20) {
            return false;
        }
        if (strlen($this->container['partnerSdkVersion']) > 32) {
            return false;
        }
        return true;
    }


    /**
     * Gets terminalId
     * @return string
     */
    public function getTerminalId()
    {
        return $this->container['terminalId'];
    }

    /**
     * Sets terminalId
     * @param string $terminalId Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  For details, see the `terminal_id` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  **For Payouts**: This field is applicable for CtV.
     * @return $this
     */
    public function setTerminalId($terminalId)
    {
        if (!is_null($terminalId) && (strlen($terminalId) > 8)) {
            throw new \InvalidArgumentException('invalid length for $terminalId when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 8.');
        }

        $this->container['terminalId'] = $terminalId;

        return $this;
    }

    /**
     * Gets terminalSerialNumber
     * @return string
     */
    public function getTerminalSerialNumber()
    {
        return $this->container['terminalSerialNumber'];
    }

    /**
     * Sets terminalSerialNumber
     * @param string $terminalSerialNumber Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.  For details, see the `terminal_serial_number` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setTerminalSerialNumber($terminalSerialNumber)
    {
        if (!is_null($terminalSerialNumber) && (strlen($terminalSerialNumber) > 32)) {
            throw new \InvalidArgumentException('invalid length for $terminalSerialNumber when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 32.');
        }

        $this->container['terminalSerialNumber'] = $terminalSerialNumber;

        return $this;
    }

    /**
     * Gets laneNumber
     * @return string
     */
    public function getLaneNumber()
    {
        return $this->container['laneNumber'];
    }

    /**
     * Sets laneNumber
     * @param string $laneNumber Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Use the `terminalId` field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this `laneNumber` field to identify the terminal used for the transaction.  This field is a pass-through, which means that CyberSource does not check the value or modify the value in any way before sending it to the processor.
     * @return $this
     */
    public function setLaneNumber($laneNumber)
    {
        if (!is_null($laneNumber) && (strlen($laneNumber) > 8)) {
            throw new \InvalidArgumentException('invalid length for $laneNumber when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 8.');
        }

        $this->container['laneNumber'] = $laneNumber;

        return $this;
    }

    /**
     * Gets catLevel
     * @return int
     */
    public function getCatLevel()
    {
        return $this->container['catLevel'];
    }

    /**
     * Sets catLevel
     * @param int $catLevel Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  #### Chase Paymentech Solutions Only values 1, 2, and 3 are supported.  #### FDC Nashville Global Only values 7, 8, and 9 are supported.  #### GPN Only values 6, 7, 8, and 9 are supported.  #### TSYS Acquiring Solutions Only value 6 is supported. For details, see the `cat_level` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setCatLevel($catLevel)
    {

        if (!is_null($catLevel) && ($catLevel > 9)) {
            throw new \InvalidArgumentException('invalid value for $catLevel when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 9.');
        }
        if (!is_null($catLevel) && ($catLevel < 1)) {
            throw new \InvalidArgumentException('invalid value for $catLevel when calling Ptsv2paymentsPointOfSaleInformation., must be bigger than or equal to 1.');
        }

        $this->container['catLevel'] = $catLevel;

        return $this;
    }

    /**
     * Gets entryMode
     * @return string
     */
    public function getEntryMode()
    {
        return $this->container['entryMode'];
    }

    /**
     * Sets entryMode
     * @param string $entryMode Method of entering credit card information into the POS terminal. Possible values:   - `contact`: Read from direct contact with chip card.  - `contactless`: Read from a contactless interface using chip data.  - `keyed`: Manually keyed into POS terminal.  - `msd`: Read from a contactless interface using magnetic stripe data (MSD).  - `swiped`: Read from credit card magnetic stripe.  The contact, contactless, and msd values are supported only for EMV transactions.  For details, see the `pos_entry_mode` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setEntryMode($entryMode)
    {
        if (!is_null($entryMode) && (strlen($entryMode) > 11)) {
            throw new \InvalidArgumentException('invalid length for $entryMode when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 11.');
        }

        $this->container['entryMode'] = $entryMode;

        return $this;
    }

    /**
     * Gets terminalCapability
     * @return int
     */
    public function getTerminalCapability()
    {
        return $this->container['terminalCapability'];
    }

    /**
     * Sets terminalCapability
     * @param int $terminalCapability POS terminal’s capability. Possible values:   - `1`: Terminal has a magnetic stripe reader only.  - `2`: Terminal has a magnetic stripe reader and manual entry capability.  - `3`: Terminal has manual entry capability only.  - `4`: Terminal can read chip cards.  - `5`: Terminal can read contactless chip cards.  The values of 4 and 5 are supported only for EMV transactions. * Applicable only for CTV for Payouts.  For processor-specific details, see the `terminal_capability` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setTerminalCapability($terminalCapability)
    {

        if (!is_null($terminalCapability) && ($terminalCapability > 5)) {
            throw new \InvalidArgumentException('invalid value for $terminalCapability when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 5.');
        }
        if (!is_null($terminalCapability) && ($terminalCapability < 1)) {
            throw new \InvalidArgumentException('invalid value for $terminalCapability when calling Ptsv2paymentsPointOfSaleInformation., must be bigger than or equal to 1.');
        }

        $this->container['terminalCapability'] = $terminalCapability;

        return $this;
    }

    /**
     * Gets pinEntryCapability
     * @return int
     */
    public function getPinEntryCapability()
    {
        return $this->container['pinEntryCapability'];
    }

    /**
     * Sets pinEntryCapability
     * @param int $pinEntryCapability A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  POS terminal’s capability. Possible values: - `1`: Terminal has a magnetic stripe reader only. - `2`: Terminal has a magnetic stripe reader and manual entry capability. - `3`: Terminal has manual entry capability only. - `4`: Terminal can read chip cards.* - `5`: Terminal can read contactless chip cards.* * The values of 4 and 5 are supported only for EMV transactions.  For Payouts: This field is applicable for CtV.  For details, see the `terminal_capability` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setPinEntryCapability($pinEntryCapability)
    {

        if (!is_null($pinEntryCapability) && ($pinEntryCapability > 1)) {
            throw new \InvalidArgumentException('invalid value for $pinEntryCapability when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 1.');
        }
        if (!is_null($pinEntryCapability) && ($pinEntryCapability < 1)) {
            throw new \InvalidArgumentException('invalid value for $pinEntryCapability when calling Ptsv2paymentsPointOfSaleInformation., must be bigger than or equal to 1.');
        }

        $this->container['pinEntryCapability'] = $pinEntryCapability;

        return $this;
    }

    /**
     * Gets operatingEnvironment
     * @return string
     */
    public function getOperatingEnvironment()
    {
        return $this->container['operatingEnvironment'];
    }

    /**
     * Sets operatingEnvironment
     * @param string $operatingEnvironment Operating environment.  Possible values for all card types except Mastercard: - `0`: No terminal used or unknown environment. - `1`: On merchant premises, attended. - `2`: On merchant premises, unattended. Examples: oil, kiosks, self-checkout, mobile telephone, personal digital assistant (PDA). - `3`: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in taxis. - `4`: Off merchant premises, unattended. Examples: vending machines, home computer, mobile telephone, PDA. - `5`: On premises of cardholder, unattended. - `9`: Unknown delivery mode. - `S`: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the internet. - `T`: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  #### Possible values for Mastercard: - `2`: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet. - `4`: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer, mobile telephone, PDA. Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet.  This field is supported only for American Express Direct and CyberSource through VisaNet.
     * @return $this
     */
    public function setOperatingEnvironment($operatingEnvironment)
    {
        if (!is_null($operatingEnvironment) && (strlen($operatingEnvironment) > 1)) {
            throw new \InvalidArgumentException('invalid length for $operatingEnvironment when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 1.');
        }

        $this->container['operatingEnvironment'] = $operatingEnvironment;

        return $this;
    }

    /**
     * Gets emv
     * @return \CyberSource\Model\Ptsv2paymentsPointOfSaleInformationEmv
     */
    public function getEmv()
    {
        return $this->container['emv'];
    }

    /**
     * Sets emv
     * @param \CyberSource\Model\Ptsv2paymentsPointOfSaleInformationEmv $emv
     * @return $this
     */
    public function setEmv($emv)
    {
        $this->container['emv'] = $emv;

        return $this;
    }

    /**
     * Gets amexCapnData
     * @return string
     */
    public function getAmexCapnData()
    {
        return $this->container['amexCapnData'];
    }

    /**
     * Sets amexCapnData
     * @param string $amexCapnData Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see `auth_pos_data` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     * @return $this
     */
    public function setAmexCapnData($amexCapnData)
    {
        if (!is_null($amexCapnData) && (strlen($amexCapnData) > 12)) {
            throw new \InvalidArgumentException('invalid length for $amexCapnData when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 12.');
        }

        $this->container['amexCapnData'] = $amexCapnData;

        return $this;
    }

    /**
     * Gets trackData
     * @return string
     */
    public function getTrackData()
    {
        return $this->container['trackData'];
    }

    /**
     * Sets trackData
     * @param string $trackData Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111=16121019761186800000?
     * @return $this
     */
    public function setTrackData($trackData)
    {
        $this->container['trackData'] = $trackData;

        return $this;
    }

    /**
     * Gets storeAndForwardIndicator
     * @return string
     */
    public function getStoreAndForwardIndicator()
    {
        return $this->container['storeAndForwardIndicator'];
    }

    /**
     * Sets storeAndForwardIndicator
     * @param string $storeAndForwardIndicator When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  Possible values: - Y: Transaction was stored and then forwarded. - N (default): Transaction was not stored and then forwarded.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     * @return $this
     */
    public function setStoreAndForwardIndicator($storeAndForwardIndicator)
    {
        if (!is_null($storeAndForwardIndicator) && (strlen($storeAndForwardIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $storeAndForwardIndicator when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 1.');
        }

        $this->container['storeAndForwardIndicator'] = $storeAndForwardIndicator;

        return $this;
    }

    /**
     * Gets cardholderVerificationMethod
     * @return string[]
     */
    public function getCardholderVerificationMethod()
    {
        return $this->container['cardholderVerificationMethod'];
    }

    /**
     * Sets cardholderVerificationMethod
     * @param string[] $cardholderVerificationMethod
     * @return $this
     */
    public function setCardholderVerificationMethod($cardholderVerificationMethod)
    {
        $this->container['cardholderVerificationMethod'] = $cardholderVerificationMethod;

        return $this;
    }

    /**
     * Gets terminalInputCapability
     * @return string[]
     */
    public function getTerminalInputCapability()
    {
        return $this->container['terminalInputCapability'];
    }

    /**
     * Sets terminalInputCapability
     * @param string[] $terminalInputCapability
     * @return $this
     */
    public function setTerminalInputCapability($terminalInputCapability)
    {
        $this->container['terminalInputCapability'] = $terminalInputCapability;

        return $this;
    }

    /**
     * Gets terminalCardCaptureCapability
     * @return string
     */
    public function getTerminalCardCaptureCapability()
    {
        return $this->container['terminalCardCaptureCapability'];
    }

    /**
     * Sets terminalCardCaptureCapability
     * @param string $terminalCardCaptureCapability Indicates whether the terminal can capture the card.  Possible values: - 1: Terminal can capture card. - 0: Terminal cannot capture card.  This field is supported only on American Express Direct.
     * @return $this
     */
    public function setTerminalCardCaptureCapability($terminalCardCaptureCapability)
    {
        if (!is_null($terminalCardCaptureCapability) && (strlen($terminalCardCaptureCapability) > 1)) {
            throw new \InvalidArgumentException('invalid length for $terminalCardCaptureCapability when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 1.');
        }

        $this->container['terminalCardCaptureCapability'] = $terminalCardCaptureCapability;

        return $this;
    }

    /**
     * Gets terminalOutputCapability
     * @return string
     */
    public function getTerminalOutputCapability()
    {
        return $this->container['terminalOutputCapability'];
    }

    /**
     * Sets terminalOutputCapability
     * @param string $terminalOutputCapability Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported only on American Express Direct.
     * @return $this
     */
    public function setTerminalOutputCapability($terminalOutputCapability)
    {
        if (!is_null($terminalOutputCapability) && (strlen($terminalOutputCapability) > 1)) {
            throw new \InvalidArgumentException('invalid length for $terminalOutputCapability when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 1.');
        }

        $this->container['terminalOutputCapability'] = $terminalOutputCapability;

        return $this;
    }

    /**
     * Gets terminalPinCapability
     * @return int
     */
    public function getTerminalPinCapability()
    {
        return $this->container['terminalPinCapability'];
    }

    /**
     * Sets terminalPinCapability
     * @param int $terminalPinCapability Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported only on American Express Direct and SIX.
     * @return $this
     */
    public function setTerminalPinCapability($terminalPinCapability)
    {
        $this->container['terminalPinCapability'] = $terminalPinCapability;

        return $this;
    }

    /**
     * Gets deviceId
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['deviceId'];
    }

    /**
     * Sets deviceId
     * @param string $deviceId Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     * @return $this
     */
    public function setDeviceId($deviceId)
    {
        if (!is_null($deviceId) && (strlen($deviceId) > 32)) {
            throw new \InvalidArgumentException('invalid length for $deviceId when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 32.');
        }

        $this->container['deviceId'] = $deviceId;

        return $this;
    }

    /**
     * Gets pinBlockEncodingFormat
     * @return int
     */
    public function getPinBlockEncodingFormat()
    {
        return $this->container['pinBlockEncodingFormat'];
    }

    /**
     * Sets pinBlockEncodingFormat
     * @param int $pinBlockEncodingFormat Format that is used to encode the PIN block. This value is provided by the client software that is installed on the POS terminal.  Possible values: - 0: ISO 9564 format 0 - 1: ISO 9564 format 1 - 2: ISO 9564 format 2 - 3: ISO 9564 format 3  In the Credit Card Guide for the auth service: This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     * @return $this
     */
    public function setPinBlockEncodingFormat($pinBlockEncodingFormat)
    {

        if (!is_null($pinBlockEncodingFormat) && ($pinBlockEncodingFormat > 9)) {
            throw new \InvalidArgumentException('invalid value for $pinBlockEncodingFormat when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 9.');
        }

        $this->container['pinBlockEncodingFormat'] = $pinBlockEncodingFormat;

        return $this;
    }

    /**
     * Gets encryptedPin
     * @return string
     */
    public function getEncryptedPin()
    {
        return $this->container['encryptedPin'];
    }

    /**
     * Sets encryptedPin
     * @param string $encryptedPin Encrypted PIN.  This value is provided by the client software that is installed on the POS terminal.  In the Credit Card Guide for the auth service: This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     * @return $this
     */
    public function setEncryptedPin($encryptedPin)
    {
        if (!is_null($encryptedPin) && (strlen($encryptedPin) > 16)) {
            throw new \InvalidArgumentException('invalid length for $encryptedPin when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 16.');
        }

        $this->container['encryptedPin'] = $encryptedPin;

        return $this;
    }

    /**
     * Gets encryptedKeySerialNumber
     * @return string
     */
    public function getEncryptedKeySerialNumber()
    {
        return $this->container['encryptedKeySerialNumber'];
    }

    /**
     * Sets encryptedKeySerialNumber
     * @param string $encryptedKeySerialNumber This is a combination of the device's unique identifier and a transaction counter that is used in the process of decrypting the encrypted PIN.  For all terminals that are using derived unique key per transaction (DUKPT) encryption, this is generated as a single number within the terminal.
     * @return $this
     */
    public function setEncryptedKeySerialNumber($encryptedKeySerialNumber)
    {
        if (!is_null($encryptedKeySerialNumber) && (strlen($encryptedKeySerialNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $encryptedKeySerialNumber when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 20.');
        }

        $this->container['encryptedKeySerialNumber'] = $encryptedKeySerialNumber;

        return $this;
    }

    /**
     * Gets partnerSdkVersion
     * @return string
     */
    public function getPartnerSdkVersion()
    {
        return $this->container['partnerSdkVersion'];
    }

    /**
     * Sets partnerSdkVersion
     * @param string $partnerSdkVersion Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     * @return $this
     */
    public function setPartnerSdkVersion($partnerSdkVersion)
    {
        if (!is_null($partnerSdkVersion) && (strlen($partnerSdkVersion) > 32)) {
            throw new \InvalidArgumentException('invalid length for $partnerSdkVersion when calling Ptsv2paymentsPointOfSaleInformation., must be smaller than or equal to 32.');
        }

        $this->container['partnerSdkVersion'] = $partnerSdkVersion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


