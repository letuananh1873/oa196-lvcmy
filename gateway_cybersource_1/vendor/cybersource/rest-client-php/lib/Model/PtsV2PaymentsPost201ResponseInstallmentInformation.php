<?php
/**
 * PtsV2PaymentsPost201ResponseInstallmentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PtsV2PaymentsPost201ResponseInstallmentInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PtsV2PaymentsPost201ResponseInstallmentInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsV2PaymentsPost201Response_installmentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additionalCosts' => 'string',
        'additionalCostsPercentage' => 'string',
        'amountFunded' => 'string',
        'amountRequestedPercentage' => 'string',
        'annualFinancingCost' => 'string',
        'annualInterestRate' => 'string',
        'expenses' => 'string',
        'expensesPercentage' => 'string',
        'fees' => 'string',
        'feesPercentage' => 'string',
        'insurance' => 'string',
        'insurancePercentage' => 'string',
        'monthlyInterestRate' => 'string',
        'taxes' => 'string',
        'taxesPercentage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additionalCosts' => null,
        'additionalCostsPercentage' => null,
        'amountFunded' => null,
        'amountRequestedPercentage' => null,
        'annualFinancingCost' => null,
        'annualInterestRate' => null,
        'expenses' => null,
        'expensesPercentage' => null,
        'fees' => null,
        'feesPercentage' => null,
        'insurance' => null,
        'insurancePercentage' => null,
        'monthlyInterestRate' => null,
        'taxes' => null,
        'taxesPercentage' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalCosts' => 'additionalCosts',
        'additionalCostsPercentage' => 'additionalCostsPercentage',
        'amountFunded' => 'amountFunded',
        'amountRequestedPercentage' => 'amountRequestedPercentage',
        'annualFinancingCost' => 'annualFinancingCost',
        'annualInterestRate' => 'annualInterestRate',
        'expenses' => 'expenses',
        'expensesPercentage' => 'expensesPercentage',
        'fees' => 'fees',
        'feesPercentage' => 'feesPercentage',
        'insurance' => 'insurance',
        'insurancePercentage' => 'insurancePercentage',
        'monthlyInterestRate' => 'monthlyInterestRate',
        'taxes' => 'taxes',
        'taxesPercentage' => 'taxesPercentage'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'additionalCosts' => 'setAdditionalCosts',
        'additionalCostsPercentage' => 'setAdditionalCostsPercentage',
        'amountFunded' => 'setAmountFunded',
        'amountRequestedPercentage' => 'setAmountRequestedPercentage',
        'annualFinancingCost' => 'setAnnualFinancingCost',
        'annualInterestRate' => 'setAnnualInterestRate',
        'expenses' => 'setExpenses',
        'expensesPercentage' => 'setExpensesPercentage',
        'fees' => 'setFees',
        'feesPercentage' => 'setFeesPercentage',
        'insurance' => 'setInsurance',
        'insurancePercentage' => 'setInsurancePercentage',
        'monthlyInterestRate' => 'setMonthlyInterestRate',
        'taxes' => 'setTaxes',
        'taxesPercentage' => 'setTaxesPercentage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'additionalCosts' => 'getAdditionalCosts',
        'additionalCostsPercentage' => 'getAdditionalCostsPercentage',
        'amountFunded' => 'getAmountFunded',
        'amountRequestedPercentage' => 'getAmountRequestedPercentage',
        'annualFinancingCost' => 'getAnnualFinancingCost',
        'annualInterestRate' => 'getAnnualInterestRate',
        'expenses' => 'getExpenses',
        'expensesPercentage' => 'getExpensesPercentage',
        'fees' => 'getFees',
        'feesPercentage' => 'getFeesPercentage',
        'insurance' => 'getInsurance',
        'insurancePercentage' => 'getInsurancePercentage',
        'monthlyInterestRate' => 'getMonthlyInterestRate',
        'taxes' => 'getTaxes',
        'taxesPercentage' => 'getTaxesPercentage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalCosts'] = isset($data['additionalCosts']) ? $data['additionalCosts'] : null;
        $this->container['additionalCostsPercentage'] = isset($data['additionalCostsPercentage']) ? $data['additionalCostsPercentage'] : null;
        $this->container['amountFunded'] = isset($data['amountFunded']) ? $data['amountFunded'] : null;
        $this->container['amountRequestedPercentage'] = isset($data['amountRequestedPercentage']) ? $data['amountRequestedPercentage'] : null;
        $this->container['annualFinancingCost'] = isset($data['annualFinancingCost']) ? $data['annualFinancingCost'] : null;
        $this->container['annualInterestRate'] = isset($data['annualInterestRate']) ? $data['annualInterestRate'] : null;
        $this->container['expenses'] = isset($data['expenses']) ? $data['expenses'] : null;
        $this->container['expensesPercentage'] = isset($data['expensesPercentage']) ? $data['expensesPercentage'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['feesPercentage'] = isset($data['feesPercentage']) ? $data['feesPercentage'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['insurancePercentage'] = isset($data['insurancePercentage']) ? $data['insurancePercentage'] : null;
        $this->container['monthlyInterestRate'] = isset($data['monthlyInterestRate']) ? $data['monthlyInterestRate'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
        $this->container['taxesPercentage'] = isset($data['taxesPercentage']) ? $data['taxesPercentage'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets additionalCosts
     * @return string
     */
    public function getAdditionalCosts()
    {
        return $this->container['additionalCosts'];
    }

    /**
     * Sets additionalCosts
     * @param string $additionalCosts Additional costs charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 128-139 - Field: Total Other Costs
     * @return $this
     */
    public function setAdditionalCosts($additionalCosts)
    {
        $this->container['additionalCosts'] = $additionalCosts;

        return $this;
    }

    /**
     * Gets additionalCostsPercentage
     * @return string
     */
    public function getAdditionalCostsPercentage()
    {
        return $this->container['additionalCostsPercentage'];
    }

    /**
     * Sets additionalCostsPercentage
     * @param string $additionalCostsPercentage Additional costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 140-143 - Field: Percent of Total Other Costs
     * @return $this
     */
    public function setAdditionalCostsPercentage($additionalCostsPercentage)
    {
        $this->container['additionalCostsPercentage'] = $additionalCostsPercentage;

        return $this;
    }

    /**
     * Gets amountFunded
     * @return string
     */
    public function getAmountFunded()
    {
        return $this->container['amountFunded'];
    }

    /**
     * Sets amountFunded
     * @param string $amountFunded Amount funded.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 48-59 - Field: Total Amount Funded
     * @return $this
     */
    public function setAmountFunded($amountFunded)
    {
        $this->container['amountFunded'] = $amountFunded;

        return $this;
    }

    /**
     * Gets amountRequestedPercentage
     * @return string
     */
    public function getAmountRequestedPercentage()
    {
        return $this->container['amountRequestedPercentage'];
    }

    /**
     * Sets amountRequestedPercentage
     * @param string $amountRequestedPercentage Amount requested divided by the amount funded.  For example: - A value of 90.0 specifies 90%. - A value of 93.7 specifies 93.7%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 60-63 - Field: Percent of Amount Requested
     * @return $this
     */
    public function setAmountRequestedPercentage($amountRequestedPercentage)
    {
        $this->container['amountRequestedPercentage'] = $amountRequestedPercentage;

        return $this;
    }

    /**
     * Gets annualFinancingCost
     * @return string
     */
    public function getAnnualFinancingCost()
    {
        return $this->container['annualFinancingCost'];
    }

    /**
     * Sets annualFinancingCost
     * @param string $annualFinancingCost Annual cost of financing the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 158-164 - Field: Annual Total Cost of Financing
     * @return $this
     */
    public function setAnnualFinancingCost($annualFinancingCost)
    {
        $this->container['annualFinancingCost'] = $annualFinancingCost;

        return $this;
    }

    /**
     * Gets annualInterestRate
     * @return string
     */
    public function getAnnualInterestRate()
    {
        return $this->container['annualInterestRate'];
    }

    /**
     * Sets annualInterestRate
     * @param string $annualInterestRate Annual interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 151-157 - Field: Annual Interest Rate
     * @return $this
     */
    public function setAnnualInterestRate($annualInterestRate)
    {
        $this->container['annualInterestRate'] = $annualInterestRate;

        return $this;
    }

    /**
     * Gets expenses
     * @return string
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     * @param string $expenses Expenses charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 64-75 - Field: Total Expenses
     * @return $this
     */
    public function setExpenses($expenses)
    {
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets expensesPercentage
     * @return string
     */
    public function getExpensesPercentage()
    {
        return $this->container['expensesPercentage'];
    }

    /**
     * Sets expensesPercentage
     * @param string $expensesPercentage Expenses divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 76-79 - Field: Percent of Total Expenses
     * @return $this
     */
    public function setExpensesPercentage($expensesPercentage)
    {
        $this->container['expensesPercentage'] = $expensesPercentage;

        return $this;
    }

    /**
     * Gets fees
     * @return string
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     * @param string $fees Fees charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 80-91 - Field: Total Fees
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets feesPercentage
     * @return string
     */
    public function getFeesPercentage()
    {
        return $this->container['feesPercentage'];
    }

    /**
     * Sets feesPercentage
     * @param string $feesPercentage Fees divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 92-95 - Field: Percent of Total Fees
     * @return $this
     */
    public function setFeesPercentage($feesPercentage)
    {
        $this->container['feesPercentage'] = $feesPercentage;

        return $this;
    }

    /**
     * Gets insurance
     * @return string
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     * @param string $insurance Insurance charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 112-123 - Field: Total Insurance
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets insurancePercentage
     * @return string
     */
    public function getInsurancePercentage()
    {
        return $this->container['insurancePercentage'];
    }

    /**
     * Sets insurancePercentage
     * @param string $insurancePercentage Insurance costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 124-127 - Field: Percent Of Total Insurance
     * @return $this
     */
    public function setInsurancePercentage($insurancePercentage)
    {
        $this->container['insurancePercentage'] = $insurancePercentage;

        return $this;
    }

    /**
     * Gets monthlyInterestRate
     * @return string
     */
    public function getMonthlyInterestRate()
    {
        return $this->container['monthlyInterestRate'];
    }

    /**
     * Sets monthlyInterestRate
     * @param string $monthlyInterestRate Monthly interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 144-150 - Field: Monthly Interest Rate
     * @return $this
     */
    public function setMonthlyInterestRate($monthlyInterestRate)
    {
        $this->container['monthlyInterestRate'] = $monthlyInterestRate;

        return $this;
    }

    /**
     * Gets taxes
     * @return string
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     * @param string $taxes Taxes collected by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 96-107 - Field: Total Taxes
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets taxesPercentage
     * @return string
     */
    public function getTaxesPercentage()
    {
        return $this->container['taxesPercentage'];
    }

    /**
     * Sets taxesPercentage
     * @param string $taxesPercentage Taxes divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 108-111 - Field: Percent of Total Taxes
     * @return $this
     */
    public function setTaxesPercentage($taxesPercentage)
    {
        $this->container['taxesPercentage'] = $taxesPercentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


